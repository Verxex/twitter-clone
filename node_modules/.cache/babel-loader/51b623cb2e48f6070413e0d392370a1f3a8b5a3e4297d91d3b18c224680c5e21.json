{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  items: [],\n  loadingStatus: 'never'\n};\n\n// First, create the thunk\nconst fetchTweets = createAsyncThunk('tweets/fetchTweets', async () => {\n  const {\n    data\n  } = await axios.get('https://63ba8fd056043ab3c79e406c.mockapi.io/tweets');\n  return data;\n});\nexport const tweetSlice = createSlice({\n  name: 'tweets',\n  initialState,\n  reducers: {\n    addTweet: (state, action) => {\n      state.items.push(action.payload);\n    },\n    removeTweet: (state, action) => {\n      state.items = state.items.filter(obj => obj.id !== action.payload);\n    }\n  },\n  extraReducers: tweetsBuilder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    tweetsBuilder.addCase(fetchTweets.pending, state => {\n      state.loadingStatus = 'loading';\n      state.items = [];\n    });\n    tweetsBuilder.addCase(fetchTweets.fulfilled, (state, action) => {\n      state.loadingStatus = 'success';\n      state.items = action.payload;\n    });\n    tweetsBuilder.addCase(fetchTweets.rejected, state => {\n      state.loadingStatus = 'error';\n      state.items = [];\n      console.log('ошибка загрузки Твиттов');\n    });\n  }\n});\nexport const {\n  addTweet,\n  removeTweet\n} = tweetSlice.actions;\nexport default tweetSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","items","loadingStatus","fetchTweets","data","get","tweetSlice","name","reducers","addTweet","state","action","push","payload","removeTweet","filter","obj","id","extraReducers","tweetsBuilder","addCase","pending","fulfilled","rejected","console","log","actions","reducer"],"sources":["H:/ReacktJS/twitter-clone-v1.001/src/components/Redux/Slices/TweetSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport type { PayloadAction } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nexport type user = {\r\n  username: string;\r\n  fullname: string;\r\n  avatarUrl: string;\r\n};\r\n\r\nexport type tweet = {\r\n  id: string;\r\n  text: string;\r\n  user: user;\r\n};\r\n\r\nexport interface TweetSliceState {\r\n  items: tweet[];\r\n  loadingStatus: 'success' | 'loading' | 'error' | 'never';\r\n}\r\n\r\nconst initialState: TweetSliceState = {\r\n  items: [],\r\n  loadingStatus: 'never',\r\n};\r\n\r\n// First, create the thunk\r\nconst fetchTweets = createAsyncThunk<tweet[]>('tweets/fetchTweets', async () => {\r\n  const { data } = await axios.get<tweet[]>('https://63ba8fd056043ab3c79e406c.mockapi.io/tweets');\r\n  return data;\r\n});\r\n\r\nexport const tweetSlice = createSlice({\r\n  name: 'tweets',\r\n  initialState,\r\n  reducers: {\r\n    addTweet: (state, action: PayloadAction<tweet>) => {\r\n      state.items.push(action.payload);\r\n    },\r\n    removeTweet: (state, action: PayloadAction<string>) => {\r\n      state.items = state.items.filter((obj) => obj.id !== action.payload);\r\n    },\r\n  },\r\n  extraReducers: (tweetsBuilder) => {\r\n    // Add reducers for additional action types here, and handle loading state as needed\r\n    tweetsBuilder.addCase(fetchTweets.pending, (state) => {\r\n      state.loadingStatus = 'loading';\r\n      state.items = [];\r\n    });\r\n    tweetsBuilder.addCase(fetchTweets.fulfilled, (state, action) => {\r\n      state.loadingStatus = 'success';\r\n      state.items = action.payload;\r\n    });\r\n    tweetsBuilder.addCase(fetchTweets.rejected, (state) => {\r\n      state.loadingStatus = 'error';\r\n      state.items = [];\r\n      console.log('ошибка загрузки Твиттов');\r\n    });\r\n  },\r\n});\r\n\r\nexport const { addTweet, removeTweet } = tweetSlice.actions;\r\n\r\nexport default tweetSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAOC,KAAK,MAAM,OAAO;AAmBzB,MAAMC,YAA6B,GAAG;EACpCC,KAAK,EAAE,EAAE;EACTC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGL,gBAAgB,CAAU,oBAAoB,EAAE,YAAY;EAC9E,MAAM;IAAEM;EAAK,CAAC,GAAG,MAAML,KAAK,CAACM,GAAG,CAAU,oDAAoD,CAAC;EAC/F,OAAOD,IAAI;AACb,CAAC,CAAC;AAEF,OAAO,MAAME,UAAU,GAAGT,WAAW,CAAC;EACpCU,IAAI,EAAE,QAAQ;EACdP,YAAY;EACZQ,QAAQ,EAAE;IACRC,QAAQ,EAAE,CAACC,KAAK,EAAEC,MAA4B,KAAK;MACjDD,KAAK,CAACT,KAAK,CAACW,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAClC,CAAC;IACDC,WAAW,EAAE,CAACJ,KAAK,EAAEC,MAA6B,KAAK;MACrDD,KAAK,CAACT,KAAK,GAAGS,KAAK,CAACT,KAAK,CAACc,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKN,MAAM,CAACE,OAAO,CAAC;IACtE;EACF,CAAC;EACDK,aAAa,EAAGC,aAAa,IAAK;IAChC;IACAA,aAAa,CAACC,OAAO,CAACjB,WAAW,CAACkB,OAAO,EAAGX,KAAK,IAAK;MACpDA,KAAK,CAACR,aAAa,GAAG,SAAS;MAC/BQ,KAAK,CAACT,KAAK,GAAG,EAAE;IAClB,CAAC,CAAC;IACFkB,aAAa,CAACC,OAAO,CAACjB,WAAW,CAACmB,SAAS,EAAE,CAACZ,KAAK,EAAEC,MAAM,KAAK;MAC9DD,KAAK,CAACR,aAAa,GAAG,SAAS;MAC/BQ,KAAK,CAACT,KAAK,GAAGU,MAAM,CAACE,OAAO;IAC9B,CAAC,CAAC;IACFM,aAAa,CAACC,OAAO,CAACjB,WAAW,CAACoB,QAAQ,EAAGb,KAAK,IAAK;MACrDA,KAAK,CAACR,aAAa,GAAG,OAAO;MAC7BQ,KAAK,CAACT,KAAK,GAAG,EAAE;MAChBuB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACxC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEhB,QAAQ;EAAEK;AAAY,CAAC,GAAGR,UAAU,CAACoB,OAAO;AAE3D,eAAepB,UAAU,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}